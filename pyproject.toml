[project]
name = "adk-1"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "google-adk>=1.3.0",
    "ipykernel>=6.29.5",
    "jupyter>=1.1.1",
    "litellm>=1.72.4",
    "notebook>=7.4.3",
    "python-dotenv>=1.1.0",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.16.0",
    "poethepoet>=0.35.0",
    "pre-commit>=4.2.0",
    "pytest-asyncio>=1.0.0",
    "pytest>=8.3.0",
    "ruff>=0.11.13",
]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
mypy_path = "src"
follow_imports = "silent"
show_error_codes = true
show_column_numbers = true
pretty = true
exclude = [
    "^\\\\.venv",
    "/\\\\.",
    "^\\\\."
]

[tool.ruff]
target-version = "py313"
line-length = 88
indent-width = 4
exclude = [
    ".venv",
    ".*",
    "__pycache__",
    "build",
    "dist"
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "ISC",    # flake8-implicit-str-concat
    "T20",    # flake8-print
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "NPY",    # numpy
    "RUF",    # ruff-specific rules
]
ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D213",   # Multi-line docstring summary should start at the second line
    "D401",   # First line should be in imperative mood
    "D406",   # Section name should end with a newline
    "D407",   # Missing dashed underline after section
    "D408",   # Section underline should be in the line following the section's name
    "D409",   # Section underline should match the length of its name
    "D413",   # Missing blank line after last section
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "PLR2004", "ARG", "D"]
"hello.py" = ["T201"]
"multi_tool_agent/agent.py" = ["T201"]
"live_agent/agent.py" = ["T201"]
"test_*.py" = ["T201"]  # Allow print in test files
# Notebook-specific ignores
"*.ipynb" = [
    "T201",    # Allow print statements in notebooks
    "E501",    # Allow longer lines in notebooks
    "I001",    # Ignore import sorting in notebooks
    "F401",    # Allow unused imports in notebooks (common in exploratory code)
    "W293",    # Allow trailing whitespace in notebooks
    "D",       # Ignore all docstring issues in notebooks
    "ERA",     # Allow commented-out code in notebooks
    "RET",     # Ignore return statement issues in notebooks
    "PLR",     # Ignore pylint refactor suggestions in notebooks
    "ARG",     # Ignore unused arguments in notebooks
    "PTH",     # Allow os.path usage in notebooks
    "SIM",     # Ignore simplification suggestions in notebooks
    "COM",     # Ignore comma issues in notebooks
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["multi_tool_agent"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | \..*
)/
'''

[tool.poe.tasks]
# Linting tasks
lint = "ruff check ."
lint-fix = "ruff check . --fix"

# Formatting tasks
format = "black ."
format-check = "black --check ."
format-ruff = "ruff format ."

# Type checking
type = "mypy ."
typecheck = "mypy ."

# Combined tasks
check = ["format-check", "lint", "typecheck"]
fix = ["format", "lint-fix"]
all = ["fix", "typecheck"]

# Pre-commit
pre-commit = "pre-commit run --all-files"

# Clean tasks
clean = """
find . -type f -name '*.pyc' -delete
find . -type d -name '__pycache__' -delete
find . -type d -name '.mypy_cache' -delete
find . -type d -name '.ruff_cache' -delete
"""

# Help task
help = { shell = "poe --help" }

[tool.poe.tasks.run]
help = "Run the multi_tool_agent (default)"
cmd = "adk run multi_tool_agent"
env = { GOOGLE_API_KEY = { default = "${GOOGLE_API_KEY}" } }

[tool.poe.tasks.run-multi]
help = "Run the multi_tool_agent"
cmd = "adk run multi_tool_agent"
env = { GOOGLE_API_KEY = { default = "${GOOGLE_API_KEY}" } }

[tool.poe.tasks.run-live]
help = "Run the live_agent"
cmd = "adk run live_agent"
env = { GOOGLE_API_KEY = { default = "${GOOGLE_API_KEY}" } }

[tool.poe.tasks.web]
help = "Run the web app for multi_tool_agent (default)"
cmd = "adk web multi_tool_agent"
env = { GOOGLE_API_KEY = { default = "${GOOGLE_API_KEY}" } }

[tool.poe.tasks.web-multi]
help = "Run the web app for multi_tool_agent"
cmd = "adk web multi_tool_agent"
env = { GOOGLE_API_KEY = { default = "${GOOGLE_API_KEY}" } }

[tool.poe.tasks.web-live]
help = "Run the web app for live_agent"
cmd = "adk web live_agent"
env = { GOOGLE_API_KEY = { default = "${GOOGLE_API_KEY}" } }

[tool.poe.tasks.test]
help = "Run tests with pytest"
cmd = "pytest -v tests/"

[tool.poe.tasks.notebook]
help = "Start Jupyter notebook server"
cmd = "jupyter notebook"

[tool.poe.tasks.lab]
help = "Start JupyterLab server"
cmd = "jupyter lab"

[tool.poe.tasks.kernel-list]
help = "List available Jupyter kernels"
cmd = "jupyter kernelspec list"
